<%
#returns javascript only once per request.
if @is_media_included != true
  @is_media_included = true
%>
  <script type="text/javascript">
    var Media = Class.create({
      initialize: function(){
        this.unique_counter = 0;
        this.fields = [];
      },
      //Returns a string that is unique between all fields.
      generate_identifier: function(){
        this.unique_counter++;
        return ""+this.unique_counter;
      },
      // Limit = 0 -> no limit
      add_field: function(counter, field, limit, name){
        this.fields[counter] = {field: field, size: 0, max: limit, name: name};
      },
      //Adds a new element to a media field
      add_element: function(field, id, name, counter, thumbnail_url, view_link, asset_name, options){
        options = options || {};
        if (asset_name == undefined) asset_name = name;
        var unique_id = (options && options.unique_id ) || this.generate_identifier();
        var templ = new Template(
        "<li class='element element_#{unique_id}'>"+
          "<input type='hidden' name='#{field_name}[#{field}_ids][#{unique_id}][id]' value='#{id}' />"+
          "<input type='hidden' class='position' name='#{field_name}[#{field}_ids][#{unique_id}][position]' value='' />"+
          "<a class='handle'>handle</a>"+
          "<h4>#{asset_name}</h4>" +
          "<img src='#{thumb}' alt='#{asset_name}'/>" +
          "#{view_link}" +
          "<a onclick='media_fields.delete_element(\"#{field}\",\"#{counter}\", #{unique_id}); return false;' href='#' class='delete'><%= t('ubiquo.media.remove') %></a>" +
          ( options.advanced_form ? '<a href ="'+ options.advanced_form +'" '+
            'target="_blank" '+
            'id="#\{field}_#\{counter}_ubiquo_media_advanced_edit_#\{unique_id}" '+
            'class="<%= advanced_edit_link_attributes[:class] %>" '+
            'params="<%= advanced_edit_link_attributes[:params] %>" >' +
<%= (h t('ubiquo.media.advanced')).to_json %> + "</a>" : "") +
          "#{content}"+
          "<dl class='assigned_text'>"+
          "<dt><%= t('ubiquo.media.assigned_text') %>:</dt>"+
          "<dd class='name'>"+
          "<span>#{name}</span>"+
          "<a class='change' href='#' onclick='media_fields.change_name(\"#{counter}\", \"#{unique_id}\");return false;'><%= t('ubiquo.media.change_text') %></a>"+
          "</dd>"+
          "<dd class='field' style='display:none'>"+
          "<input type='text' class='short' onkeypress='if(event.keyCode==13){media_fields.change_name(\"#{counter}\", \"#{unique_id}\");return false;}' name='#{field_name}[#{field}_ids][#{unique_id}][name]' value='#{name}'/>"+
          "<a class='change' href='#' onclick='media_fields.change_name(\"#{counter}\", \"#{unique_id}\");return false;'><%= t('ubiquo.media.save') %></a>"+
          "</dd>"+
          "</dl>"+
          "</li>")
        var elem = templ.evaluate({
          counter: counter,
          field: field,
          id: id,
          unique_id: unique_id,
          view_link: view_link,
          thumb: thumbnail_url,
          name: name.gsub('"', "&quot;").gsub("'","&#39;"),
          asset_name: asset_name,
          field_name: this.fields[counter]['name']
        });
        var inserted = false;
        if( options["position"] ){
          //Insert the element in the position given
          //Notice that position is allways > 0
          var elems = $('media_selector_'+ counter).select(".relations_list .element");
          if(elems.length > 0 && options.position > 0 && options.position < elems.length + 1){
            elems[options.position-1].insert({before:elem});
            inserted = true;
          }
        }
        
        if( !inserted )
          $('media_selector_'+ counter).select(".relations_list").first().insert(elem);
        
        var set_positions = function() {
          $$('#media_selector_'+counter+' li.element').each(function(el, i) {
            el.select('input[name*="][position]"]').first().value = i+1;
          });
        }
        Sortable.create('relations_list_'+ counter, {
          handle:'handle',
          onChange:function(){
            set_positions();
          }
        });

        this.fields[counter]['size']++;
        set_positions();
        this.reload(field, counter);

        if( options.advanced_form ){
          var target = "" + field + "_"  + counter + "_ubiquo_media_advanced_edit_"+unique_id;
          var advanced_link = $(target);
          if( advanced_link.href.indexOf("?") < 0){
            advanced_link.href += "?";
          }
          advanced_link.href += "target="+ target;
          if( window["myLightWindow"] ){
            myLightWindow._processLink( advanced_link );
          }
          //Set a global func to replace current element
          window[ target +"_replace"] = function( params ){
            var position = media_fields.delete_element(field, counter, unique_id);
            params["options"] = params["options"] || {};
            params.options.unique_id = params.options.unique_id || unique_id;
            if( position > 0 ) params.options.position = position;
            media_fields.add_element(field, params["id"], params["asset_name"], counter, params["thumbnail_url"], params["view_link"], params["asset_name"],params["options"]);
          };
          if( Object.isFunction( options["update_target_callback"] ) ){ options.update_target_callback( target ); }
        }

      },

      change_name: function(counter, unique_id){
        var parent = $('media_selector_'+ counter).select(".element_"+unique_id).first()
        parent.select('.name span').first().innerHTML = parent.select('.field input').first().value;
        parent.select('.name').first().toggle();
        parent.select('.field').first().toggle();
        try{
          /* Preventing Javascript Error in IE8 when try to focus to a hidden field */
          parent.select('.field input').first().focus();
        }
        catch(e){
          return false;
        }
      },

      //Deletes a selected element from a media field
      //and returns current position before removing it
      delete_element: function(field, counter, unique_id){
        var parent = $('media_selector_'+ counter).select(".element_"+unique_id).first();
        var position = parent.select(".position").first().value;
        parent.remove();
        this.fields[counter]['size']--;
        this.reload(field, counter);
        return position;
      },

      //Hides or show 'add' and 'search' links (and inner content)
      reload: function(field, counter){
        var f = this.fields[counter];
        var action = null;
        if(f['max'] == 0 || f['size'] < f['max']){
          action = function(s){s.show();}
        } else {
          action = function(s){s.hide();}
        }
        selector = $('media_selector_'+ counter)
        selector.select('.handle').each(function(e){
          if(f['size'] <= 1){
            e.hide();
          } else {
            e.show();
          }
        });
        var e = selector.select(".list_caption").first();
        if(f['size'] == 0){
          e.innerHTML="<input type='hidden' name='"+this.fields[counter]['name']+"["+field+"_ids][]' />";
        } else if(f['size'] == 1){
          e.innerHTML="<h4><%= t('ubiquo.media.selected_media_element') %>:</h4><p><%= t('ubiquo.media.footer_text') %></p>";
        } else{
          e.innerHTML="<h4><%= t('ubiquo.media.selected_media_elements') %>:</h4><p><%= t('ubiquo.media.footer_text') %></p>";
        }
        action(selector.select(".actions").first());
      }
    });
    media_fields = new Media();
  </script>
<% end %>
